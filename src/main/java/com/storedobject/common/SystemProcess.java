/*
 * Copyright 2018 Syam Pillai
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.storedobject.common;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

/**
 * The SystemProcess class facilitates the execution of system-level commands within
 * a Java application. It allows the user to configure the command, environment variables,
 * and working directory for the process, and provides mechanisms to capture the process
 * output, error, and exit value.
 *
 * This class supports chaining and modification of commands, managing input/output streams,
 * and exception handling for errors encountered during the execution of the system process.
 *
 * Users can retrieve the output and errors generated by the process, as well as the process
 * exit value, to determine the outcome of the command execution.
 *
 * @author Syam
 */
public class SystemProcess {

    private int exitValue;
    private List<String> command;
    private String output, error;
    private String[] environment;
    private File directory;

    /**
     * Constructs a new SystemProcess object with an empty command.
     * This constructor initializes the internal state of the SystemProcess,
     * allowing for further configuration such as setting commands, environment
     * variables, or working directory before execution.
     */
    public SystemProcess() {
        this("");
    }

    /**
     * Instantiates a SystemProcess object with a specified command to execute.
     *
     * @param command the initial system command to be executed; can be modified later.
     */
    public SystemProcess(String command) {
        setCommand(command);
    }

    /**
     * Sets the command to be executed by this process.
     * The command is stored internally as a list of strings, allowing modifications
     * and additions to the command string at a later time.
     *
     * @param command the initial command to be executed by the process. Cannot be null.
     */
    public void setCommand(String command) {
        this.command = new ArrayList<>();
        this.command.add(command);
    }

    /**
     * Appends the specified command to the existing command list.
     * This method allows the user to extend or modify the current command
     * being constructed for execution.
     *
     * @param command the command string to append to the existing command
     */
    public void addCommand(String command) {
        this.command.add(command);
    }

    /**
     * Retrieves the current system command as a list of strings.
     * The command is constructed and stored as a list representation
     * of the internal command data structure.
     *
     * @return the list representation of the current command.
     */
    public List<String> getCommand() {
        return command;
    }

    /**
     * Executes the given system command by setting it as the current command
     * and then invoking the execution process.
     *
     * @param command the system command to be executed
     * @throws Exception if an error occurs during the command execution
     */
    public void execute(String command) throws Exception {
        setCommand(command);
        execute();
    }

    /**
     * Executes a system-level command with the pre-configured options including the command,
     * environment variables, and working directory. This method captures the standard output
     * and error streams of the executed process and determines its exit value.
     *
     * Upon execution, the standard output and error streams are handled asynchronously
     * by the {@code StringCollector} utility, which gathers the output and errors
     * into corresponding strings. The exit value of the process is retrieved and stored
     * for later usage.
     *
     * If an exception is encountered while reading from the output or error streams,
     * the same is thrown from this method.
     *
     * @throws Exception if an exception occurs during the execution of the process or
     *                   while reading the output/error streams
     */
    public void execute() throws Exception {
        exitValue = Integer.MIN_VALUE;
        ProcessBuilder pb = new ProcessBuilder(command);
        if (environment != null) {
            pb.environment().clear();
            for (String env : environment) {
                String[] keyValue = env.split("=", 2);
                if (keyValue.length == 2) {
                    pb.environment().put(keyValue[0], keyValue[1]);
                }
            }
        }
        if (directory != null) {
            pb.directory(directory);
        }
        Process p = pb.start();
        StringCollector sco = new StringCollector(p.getInputStream());
        StringCollector sce = new StringCollector(p.getErrorStream());
        p.waitFor();
        sco.join();
        sce.join();
        exitValue = p.exitValue();
        if (sco.getException() != null) {
            throw sco.getException();
        }
        if (sce.getException() != null) {
            throw sce.getException();
        }
        output = sco.getString();
        error = sce.getString();
    }

    /**
     * Retrieves the exit value of the last executed system process.
     * The exit value is typically used to determine the success or failure
     * of the executed command. A value of 0 usually indicates success,
     * while non-zero values indicate errors or abnormal termination.
     *
     * @return the exit value of the last executed process, or Integer.MIN_VALUE
     *         if the process has not been executed yet.
     */
    public int getExitValue() {
        return exitValue;
    }

    /**
     * Retrieves the output produced by the executed system process.
     * The output is the standard output stream (stdout) captured during
     * the execution of the process.
     *
     * @return a String containing the standard output of the executed process.
     *         If the process has not been executed or no output was produced, it may return null.
     */
    public String getOutput() {
        return output;
    }

    /**
     * Retrieves the error message generated during the execution of the process.
     *
     * @return the error output of the process as a String, or null if no error occurred.
     */
    public String getError() {
        return error;
    }

    /**
     * Retrieves the environment variables associated with the system process.
     *
     * @return An array of strings representing the environment variables, or null if no environment variables are set.
     */
    public String[] getEnvironment() {
        return environment;
    }

    /**
     * Sets the environment variables for the system process. These environment variables
     * will be passed to the underlying process when it is executed.
     *
     * @param environment an array of strings, where each string represents an environment
     *                     variable in the format "key=value". If null, the process will
     *                     inherit the environment of the current Java process.
     */
    public void setEnvironment(String[] environment) {
        this.environment = environment;
    }

    /**
     * Retrieves the current working directory for the process execution.
     *
     * @return The directory where the process will be executed, or null if no directory has been specified.
     */
    public File getDirectory() {
        return directory;
    }

    /**
     * Sets the working directory for the process to be executed.
     * The specified directory must be a valid directory, or else
     * the directory will not be updated.
     *
     * @param directory the working directory to be set for the process.
     *                  If null or not a valid directory, this method
     *                  does nothing.
     */
    public void setDirectory(File directory) {
        if (directory != null && !directory.isDirectory()) {
            return;
        }
        this.directory = directory;
    }
}